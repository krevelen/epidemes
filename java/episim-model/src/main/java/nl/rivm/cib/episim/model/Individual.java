/* $Id: fa433a59293b9ce3856ae7aa0f78663b7a77b533 $
 * 
 * Part of ZonMW project no. 50-53000-98-156
 * 
 * @license
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Copyright (c) 2016 RIVM National Institute for Health and Environment 
 */
package nl.rivm.cib.episim.model;

import java.util.HashMap;
import java.util.Map;

import io.coala.time.x.Duration;
import io.coala.time.x.Instant;
import nl.rivm.cib.episim.time.Scheduler;
import nl.rivm.cib.episim.time.Timed;
import rx.Observable;
import rx.subjects.PublishSubject;
import rx.subjects.Subject;

/**
 * {@link Individual} represents an infective/infectious subject
 * <p>
 * lifecycle:
 * <ol>
 * <li>birth into single/double parent family</li>
 * <li>day care / school / work, *</li>
 * <li>activities / communities, *</li>
 * <li>vaccination, *</li>
 * <li>move home, *</li>
 * <li>partners, *</li>
 * <li>offspring, *</li>
 * <li>travels, *</li>
 * <li>retirement</li>
 * <li>death</li>
 * </ol>
 * <p>
 * household properties:
 * <ol>
 * <li>n x adults</li>
 * <li>m x children</li>
 * </ol>
 *
 * @version $Date$
 * @author Rick van Krevelen
 */
public interface Individual extends Carrier, Timed
{

	/** @return the {@link Household} */
	Household getHousehold();

	/** @return the {@link Gender} */
	Gender getGender();

	/** @return the birth {@link Instant} */
	Instant getBirth();

	/** @return the current {@link TransmissionSpace} */
	TransmissionSpace getSpace();

//	// social network dynamics (incl self): links/rates change due to media
//	// attention/campaigns, active search, medical consultations
//	public Map<Subject, Rate> complianceAuthorities;

	Map<Vaccine, VaccineAttitude> getBeliefs();

	/**
	 * @return an {@link Observable} stream of {@link TravelEvent}s generated by
	 *         this {@link Individual} based on some travel behavior
	 */
	Observable<TravelEvent> emitTravels();

	void travel( Place origin, Vehicle transport, Place destination,
		Duration travelTime );

	void move( TransmissionSpace newSpace );

	default Individual with( final Condition condition )
	{
		getConditions().put( condition.getInfection(), condition );
		return this;
	}

	default Individual with( final VaccineAttitude attitude )
	{
		getBeliefs().put( attitude.getVaccine(), attitude );
		return this;
	}

	/**
	 * {@link Simple} implementation of {@link Individual}
	 * 
	 * @version $Id$
	 * @author Rick van Krevelen
	 */
	class Simple implements Individual
	{

		/**
		 * @param household the {@link Household}
		 * @param birth the {@link Instant} of birth
		 * @param gender the {@link Gender}
		 * @param currentSpace the occupied {@link TransmissionSpace}
		 * @param conditions the {@link Condition}s
		 * @param attitudes the {@link VaccineAttitude}s
		 * @return a {@link Simple} instance of {@link Individual}
		 */
		public static Simple of( final Household household, final Instant birth,
			final Gender gender, final TransmissionSpace currentSpace )
		{
			return new Simple( household, birth, gender, currentSpace );
		}

		private final Instant birth;

		private final Gender gender;

		private final Household household;

		private final Map<Infection, Condition> conditions = new HashMap<>();

		private final Map<Vaccine, VaccineAttitude> beliefs = new HashMap<>();

		private final transient Subject<TravelEvent, TravelEvent> travels = PublishSubject
				.create();

		private TransmissionSpace space;

		/**
		 * {@link Simple} constructor
		 * 
		 * @param scheduler
		 * @param birth
		 * @param gender
		 * @param household
		 * @param currentSpace
		 * @param conditions
		 * @param attitudes
		 */
		public Simple( final Household household, final Instant birth,
			final Gender gender, final TransmissionSpace currentSpace )
		{
			this.birth = birth;
			this.gender = gender;
			this.household = household;
			this.space = currentSpace;
		}

		@Override
		public Household getHousehold()
		{
			return this.household;
		}

		@Override
		public Scheduler scheduler()
		{
			return getHousehold().scheduler();
		}

		@Override
		public Gender getGender()
		{
			return this.gender;
		}

		@Override
		public Instant getBirth()
		{
			return this.birth;
		}

		@Override
		public TransmissionSpace getSpace()
		{
			return this.space;
		}

		@Override
		public Map<Vaccine, VaccineAttitude> getBeliefs()
		{
			return this.beliefs;
		}

		@Override
		public Map<Infection, Condition> getConditions()
		{
			return this.conditions;
		}

		@Override
		public Observable<TravelEvent> emitTravels()
		{
			return this.travels.asObservable();
		}

		@Override
		public void travel( final Place origin, final Vehicle transport,
			final Place destination, final Duration travelTime )
		{
			this.travels.onNext( new TravelEvent( this, origin, transport,
					destination, travelTime ) );
//			after(travelTime).call( call )
		}

		@Override
		public void move( final TransmissionSpace newSpace )
		{
			this.space = newSpace;
		}
	}
}
