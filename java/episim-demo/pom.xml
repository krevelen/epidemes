<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>nl.rivm.cib</groupId>
		<artifactId>epidemes</artifactId>
		<version>0.1.0-SNAPSHOT</version>
		<relativePath>..</relativePath>
	</parent>

	<artifactId>epidemes-demo</artifactId>

	<name>${project.artifactId} ${project.version}</name>
	<description>
		Common Components for the RIVM Vaccination Acceptance Simulator
		$Id: fa471254d688eb29ba72683a3f2f6e0ff0182dfd $
	</description>
	<url>http://www.rivm.nl/en/Topics/M/Modelling_infectious_diseases</url>

	<properties>
		<hsqldb.version>2.3.4</hsqldb.version>
		<docker-maven-plugin.version>0.4.13</docker-maven-plugin.version>
		<docker.repoName>default</docker.repoName>
		<docker.imageName>${project.artifactId}</docker.imageName>
		<docker.tagName>${project.version}</docker.tagName>
		<docker.buildDir>${project.build.directory}/docker</docker.buildDir>
		<main.class>nl.rivm.cib.episim.geard.Geard2011Scenario</main.class>
		<dist.libDir>lib</dist.libDir>
		<dist.srcDir>${project.basedir}/dist</dist.srcDir>
	</properties>

	<repositories>
		<repository>
			<name>COALA Public Maven Repository</name>
			<id>coala-public</id>
			<url>https://github.com/krevelen/coala-binder/raw/mvn-repo/</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</repository>

		<repository>
			<name>EPIDEMES Public Maven Repository</name>
			<id>epidemes-public</id>
			<url>https://github.com/krevelen/epidemes/raw/mvn-repo/</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</repository>

		<!-- TU Delft simulation repository -->
		<repository>
			<name>DSOL Public Repository</name>
			<id>dsol</id>
			<!-- <url>http://sk-33.tbm.tudelft.nl/maven/</url> -->
			<url>http://simulation.tudelft.nl/maven</url>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>

		<dependency>
			<groupId>nl.rivm.cib</groupId>
			<artifactId>epidemes-model</artifactId>
		</dependency>

		<dependency>
			<groupId>io.coala</groupId>
			<artifactId>guice4-coala-adapter</artifactId>
		</dependency>
		<dependency>
			<groupId>io.coala</groupId>
			<artifactId>dsol3-coala-adapter</artifactId>
		</dependency>
		<dependency>
			<groupId>io.coala</groupId>
			<artifactId>math3-coala-adapter</artifactId>
		</dependency>
		<dependency>
			<groupId>io.coala</groupId>
			<artifactId>eve3-coala-adapter</artifactId>
		</dependency>

		<!-- incl. in-memory JDBC database -->
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>${hsqldb.version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.jodah</groupId>
			<artifactId>concurrentunit</artifactId>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
			</plugins>
		</pluginManagement>

		<plugins>

			<!-- copy (non-"provided"-scope) dependency jars to ${AOS}/lib/shared -->
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<excludeGroupIds>junit</excludeGroupIds>
							<includeScope>runtime</includeScope>
							<outputDirectory>${docker.buildDir}/${dist.libDir}</outputDirectory>
							<silent>false</silent>
							<overWriteIfNewer>true</overWriteIfNewer>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resource-one</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${docker.buildDir}</outputDirectory>
							<resources>
								<resource>
									<directory>${dist.srcDir}</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- set main class and class-path for executable java archive -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<mainClass>${main.class}</mainClass>
							<addClasspath>true</addClasspath>
							<classpathPrefix>${dist.libDir}/</classpathPrefix>
							<useUniqueVersions>false</useUniqueVersions>
							<!-- below config should be default -->
							<classpathLayoutType>custom</classpathLayoutType>
							<customClasspathLayout>$${artifact.artifactId}-$${artifact.version}$${dashClassifier?}.$${artifact.extension}</customClasspathLayout>
						</manifest>
						<!-- <index>true</index> <manifestEntries> <mode>development</mode> 
							<url>${project.url}</url> <key>value</key> </manifestEntries> -->
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker-maven-plugin.version}</version>
				<configuration>
					<imageName>${docker.imageName}</imageName>
					<imageTags>
						<imageTag>${docker.tagName}</imageTag>
						<imageTag>latest</imageTag>
					</imageTags>
					<baseImage>java</baseImage>
					<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
				<executions>
					<!-- <execution> <id>build-image</id> <phase>package</phase> <goals> 
						<goal>build</goal> </goals> </execution> -->
					<!-- <execution> <id>tag-image</id> <phase>package</phase> <goals> <goal>tag</goal> 
						</goals> <configuration> <image>${docker.imageName}:${docker.tagName}</image> 
						<newName>${docker.repoName}/${docker.imageName}:${docker.tagName}</newName> 
						</configuration> </execution> -->
					<!-- <execution> <id>push-image</id> <phase>deploy</phase> <goals> <goal>push</goal> 
						</goals> <configuration> <imageName>${docker.repoName}/${docker.imageName}:${docker.tagName}</imageName> 
						</configuration> </execution> -->
				</executions>
			</plugin>
		</plugins>
	</build>

</project>